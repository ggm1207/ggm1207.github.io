<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data-Structure on Gunmo&#39;s Blog</title>
    <link>/categories/data-structure/</link>
    <description>Recent content in Data-Structure on Gunmo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2020, Steve Francia and Gunmo Goo; all rights reserved.</copyright>
    <lastBuildDate>Fri, 27 Nov 2020 20:18:32 +0900</lastBuildDate><atom:link href="/categories/data-structure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>자료구조 - 배열(Array)</title>
      <link>/post/data-structure-002/</link>
      <pubDate>Fri, 27 Nov 2020 20:18:32 +0900</pubDate>
      
      <guid>/post/data-structure-002/</guid>
      <description>오늘은 PS(Problem Solving)에 자주 쓰이는 배열에 대해서 알아보겠습니다.
배열이란? 같은 Type의 변수를 연속된 공간에 할당하는 것을 배열이라 합니다.
배열 ADT 객체: &amp;lt;인덱스, 요소&amp;gt; 쌍의 집합 연산:
 create(n): n개의 요소를 가진 배열의 생성 retrive(A, i): 배열 A의 i번째 요소 반환 store(A, i, item): 배열 A의 i번째 위치에 저장  각각의 ADT를 C에서 어떻게 사용하는지 확인해 보겠습니다.
1int arr[100]; // create(100) 2arr[5] = 3; // store(arr, 5, 3) 3int item = arr[5] // retrive(arr, 5) 1차원 배열 1차원 배열은 아래와 같이 선언할 수 있다.</description>
    </item>
    
    <item>
      <title>자료구조 - 순환(Recursion)</title>
      <link>/post/data-structure-001/</link>
      <pubDate>Sun, 22 Nov 2020 07:52:03 +0900</pubDate>
      
      <guid>/post/data-structure-001/</guid>
      <description>Insert Lead paragraph here.
예전에 공부한 것을 다시 복습하는 느낌으로 보고 있는데 순환(Recursion)이 자료구조라는게 좀 놀라웠다.
왜냐하면 배열이나 트리같은 경우에는 직접 메모리에 할당을 하기 때문에 직관적으로 이해가 되는데 순환은 그렇지 않기 때문이다.
생각해보면 프로그램은 알고리즘과 자료구조로 이뤄지는데 fibonacci를 재귀로 푸는 것은 자료구조를 Recursion을 썼다는 것을 의미한다. (그렇겠지?)
 fib(n) = fib(n-1) + fib(n-2)
 그렇다면 순환의 정의는 무엇일까?
  알고리즘이나 함수가 수행 도중에 자기 자신을 다시 호출하여 문제를 해결하는 기법   예전에 교수님한테 들었던 기억으로는 재귀로 짤 수 있는 코드는 반복문을 사용해서도 짤 수 있다고 증명이 됐다고 들었다.</description>
    </item>
    
  </channel>
</rss>
